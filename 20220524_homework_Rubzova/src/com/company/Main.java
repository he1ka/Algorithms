package com.company;

public class Main {

    public static void main(String[] args) {
        searchKeysInInput(new int[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, new int[]{-2, 0, 4, 9, 12});
    }

    /**
     * –ó–∞–¥–∞—á–∞ ‚Ññ4. –î–≤–æ–∏—á–Ω—ã–π –ø–æ–∏—Å–∫
     * –†–µ–∞–ª–∏–∑—É–π—Ç–µ –∞–ª–≥–æ—Ä–∏—Ç–º –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞.
     * <p>
     * –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
     * –í –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å–æ–¥–µ—Ä–∂–∞—Ç—Å—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–µ —á–∏—Å–ª–∞ ùëÅ –∏ ùêæ (0<ùëÅ,ùêæ‚â§100000).
     * –í–æ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–µ –∑–∞–¥–∞—é—Ç—Å—è ùëÅ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–µ—Ä–≤–æ–≥–æ –º–∞—Å—Å–∏–≤–∞, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é,
     * –∞ –≤ —Ç—Ä–µ—Ç—å–µ–π —Å—Ç—Ä–æ–∫–µ ‚Äì ùêæ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤—Ç–æ—Ä–æ–≥–æ –º–∞—Å—Å–∏–≤–∞. –≠–ª–µ–º–µ–Ω—Ç—ã –æ–±–æ–∏—Ö –º–∞—Å—Å–∏–≤–æ–≤ - —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞,
     * –∫–∞–∂–¥–æ–µ –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –ø–æ –º–æ–¥—É–ª—é –Ω–µ –ø—Ä–µ–≤–æ—Å—Ö–æ–¥–∏—Ç 109
     * <p>
     * –í—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
     * –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–∑ K —á–∏—Å–µ–ª –≤—ã–≤–µ—Å—Ç–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É "YES",
     * –µ—Å–ª–∏ —ç—Ç–æ —á–∏—Å–ª–æ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –≤ –ø–µ—Ä–≤–æ–º –º–∞—Å—Å–∏–≤–µ, –∏ "NO" –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.
     */
    public static int binarySearch(int[] a, int key) {
        int low = 0;
        int high = a.length - 1;

        while (low <= high) {
            int middle = low + (high - low) / 2;

            if (key < a[middle]) {
                high = middle - 1;
            } else if (key > a[middle]) {
                low = middle + 1;
            } else {
                return middle;
            }
        }

        return -1;
    }

    public static void searchKeysInInput(int[] input, int[] keys) {
        for (int i = 0; i < keys.length; i++) {
            if (binarySearch(input, keys[i]) == -1) {
                System.out.println("NO");
            } else {
                System.out.println("YES");
            }
        }
    }
}
